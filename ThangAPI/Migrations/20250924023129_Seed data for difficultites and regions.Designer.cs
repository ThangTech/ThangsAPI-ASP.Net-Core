// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThangAPI.Data;

#nullable disable

namespace ThangAPI.Migrations
{
    [DbContext(typeof(ThangDbContext))]
    [Migration("20250924023129_Seed data for difficultites and regions")]
    partial class Seeddatafordifficultitesandregions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ThangAPI.Models.Domain.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bdff050c-6d1e-4693-ac1a-ee180519a28d"),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = new Guid("245e8287-3b85-41bb-9303-6c2f52ff26eb"),
                            Name = "Normal"
                        },
                        new
                        {
                            Id = new Guid("360a04ba-90b0-4d45-90f3-77e89eb77f79"),
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("ThangAPI.Models.Domain.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c4044e0-59da-4070-b4be-4ee6c7dcefed"),
                            Code = "LON",
                            Name = "London",
                            RegionImageURL = "london.jpg"
                        },
                        new
                        {
                            Id = new Guid("242c94d0-f607-4c35-acd8-b5d48394d8de"),
                            Code = "MAN",
                            Name = "Manchester",
                            RegionImageURL = "manchester.jpg"
                        },
                        new
                        {
                            Id = new Guid("d154e851-3c7f-4e9f-b6ff-1030701ec74f"),
                            Code = "BER",
                            Name = "Berlin",
                            RegionImageURL = "berlin.jpg"
                        },
                        new
                        {
                            Id = new Guid("2b36212b-ce30-46e5-bc7d-9aae18decdc2"),
                            Code = "MUN",
                            Name = "Munich",
                            RegionImageURL = "munich.jpg"
                        },
                        new
                        {
                            Id = new Guid("8779c4b0-b32d-4b32-8cd7-1a219467a256"),
                            Code = "HAN",
                            Name = "Ha noiu",
                            RegionImageURL = "hanoi.jpg"
                        });
                });

            modelBuilder.Entity("ThangAPI.Models.Domain.Walkcs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LengthInKm")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalkImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("RegionID");

                    b.ToTable("Walkcs");
                });

            modelBuilder.Entity("ThangAPI.Models.Domain.Walkcs", b =>
                {
                    b.HasOne("ThangAPI.Models.Domain.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThangAPI.Models.Domain.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
